/*
 * This file is generated by jOOQ.
*/
package shapedirection.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UShort;

import shapedirection.jooq.Cryptoputty;
import shapedirection.jooq.Indexes;
import shapedirection.jooq.Keys;
import shapedirection.jooq.tables.records.PeersRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Peers extends TableImpl<PeersRecord> {

    private static final long serialVersionUID = -713136014;

    /**
     * The reference instance of <code>cryptoputty.peers</code>
     */
    public static final Peers PEERS = new Peers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PeersRecord> getRecordType() {
        return PeersRecord.class;
    }

    /**
     * The column <code>cryptoputty.peers.id</code>.
     */
    public final TableField<PeersRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cryptoputty.peers.address</code>.
     */
    public final TableField<PeersRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR(39), this, "");

    /**
     * The column <code>cryptoputty.peers.port</code>.
     */
    public final TableField<PeersRecord, UShort> PORT = createField("port", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED, this, "");

    /**
     * Create a <code>cryptoputty.peers</code> table reference
     */
    public Peers() {
        this(DSL.name("peers"), null);
    }

    /**
     * Create an aliased <code>cryptoputty.peers</code> table reference
     */
    public Peers(String alias) {
        this(DSL.name(alias), PEERS);
    }

    /**
     * Create an aliased <code>cryptoputty.peers</code> table reference
     */
    public Peers(Name alias) {
        this(alias, PEERS);
    }

    private Peers(Name alias, Table<PeersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Peers(Name alias, Table<PeersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Cryptoputty.CRYPTOPUTTY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PEERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PeersRecord, Long> getIdentity() {
        return Keys.IDENTITY_PEERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PeersRecord> getPrimaryKey() {
        return Keys.KEY_PEERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PeersRecord>> getKeys() {
        return Arrays.<UniqueKey<PeersRecord>>asList(Keys.KEY_PEERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Peers as(String alias) {
        return new Peers(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Peers as(Name alias) {
        return new Peers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Peers rename(String name) {
        return new Peers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Peers rename(Name name) {
        return new Peers(name, null);
    }
}
